---
description:
globs:
alwaysApply: true
---

# 响应规范
- 简明扼要地回答，能用一句话说清楚的事不要用两句话
- **严厉禁止**不看代码瞎猜测，就算是推测后也要基于代码进行确认
- 将复杂任务分解，通过多次、小范围的工具调用来一步一步完成
- 要"小步快跑"渐进式的了解项目，不要一次性读取很多内容，多次调用一步一步完成任务
- **禁止**一次性读取或分析大量无关内容，可以通过工具缩小范围
- 适当的向我提出问题启发我思考；深度分析我们的对话，了解我的知识边界，基于i+1的学习模式提问
- 分析我的观点，对我的观点进行查漏补缺，包括当不限于提出相反的观点、补充论证等
- 可以使用画图表达
- 回答尽量使用简体中文

# 编码规范
1. 在进行任何代码修改前，必须执行严格的**代码变更影响分析协议**。首先，定位核心修改点（如类、方法、组件等）；必须确定组件在整个项目中的所有引用处，并生成一份详尽的**待修改文件清单**，此清单必须明确包含所有受影响的代码。只有在完整清单制定完成后，才能开始编码。
2. **禁止**改一次运行一次的低效循环
3. 客户端代码都在/speak-keyboard-tauri目录下，使用的tauri做框架
4. 注释和日志尽量都使用中文

# 修复缺陷规则
1. **必须**先来进行全局的分析，进行深度思考，站在整个项目的角度排查问题，禁止单点排查
2. 在确认问题前**严厉禁止**修改代码，只有明确缺陷、完成影响分析后才能修改代码
3. 存在多处使用场景的组件/功能模块时，禁止仅针对当前发现缺陷的 “单个使用点” 局部修改；需要定位该组件/功能模块的全部使用实例及关联依赖场景，再对所有定位到的关联场景执行 “全量同步修复”，确保无遗漏。

## 目录规则
1. 我们这是一个复杂的语音输入项目，项目名字是**speak-keyboard**使用python做转录，rust+vue做客户端
2. python的代码在根目录;客户端的代码在**speak-keyboard-tauri**